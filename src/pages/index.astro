---
import Page from "../layouts/Page.astro";

const sketchFiles = import.meta.glob("./**/*.html", { eager: true, as: "raw" });

let sketchesInfoProcessed = Object.entries(sketchFiles).map(
  ([filePath, htmlContent]) => {
    const parts = filePath.split("/");
    if (
      parts.length === 3 &&
      parts[0] === "." &&
      parts[2] === "index.html" &&
      /^[0-9]{6}$/.test(parts[1])
    ) {
      const dirName = parts[1];
      let title = dirName; // デフォルトはディレクトリ名
      if (typeof htmlContent === "string") {
        const titleMatch = htmlContent.match(/<title>([^<]+)<\/title>/i);
        if (titleMatch && titleMatch[1]) {
          title = titleMatch[1].trim();
        }
      }
      return {
        url: `/${dirName}/`,
        name: title,
        originalPath: filePath,
      };
    }
    return null;
  }
);

let sketchesInfo = sketchesInfoProcessed.filter(
  (sketch): sketch is { url: string; name: string; originalPath: string } =>
    sketch !== null
);

sketchesInfo.sort((a, b) => {
  // nameが取得できたので、nameでソート（元々はディレクトリ名でのソートだったが、タイトルでのソートも意味があるか検討）
  // ここでは引き続きディレクトリ名（originalPathから再取得）でソートする
  const dirA = a.originalPath.split("/")[1];
  const dirB = b.originalPath.split("/")[1];
  return dirB.localeCompare(dirA);
});
---

<Page title="Creative Coding Sketches">
  <main slot="content">
    <h2>Experiments</h2>
    <ul>
      {
        sketchesInfo.map((sketch) => {
          return (
            <li>
              <a href={sketch.url}>{sketch.name}</a>
            </li>
          );
        })
      }
      {sketchesInfo.length === 0 && <p>No sketches found.</p>}
    </ul>
    <div id="canvas-wrap"></div>
  </main>
</Page>

<style>
  main {
    margin: auto;
  }
  h2 {
    font-size: 1.2rem;
    font-weight: 700;
    line-height: 1;
    margin-top: 2em;
    margin-bottom: 2em;
  }
  ul {
    list-style: none;
    padding: 0;
  }
  li {
    margin-bottom: 2em;
    font-size: 12px;
  }
  a {
    text-decoration: none;
  }

  #canvas-wrap {
    position: absolute;
    top: 0;
    right: 0;
    width: 70%;
    height: 100%;
  }
</style>

<script>
  import p5 from "p5";

  const sketch = (p: p5) => {
    let baseNum = 0;
    let resetCount = -1;
    let searchCount = 50;
    let startCount = 0;
    let drawCount = 0;
    let xyArr: number[][] = [];
    p.setup = () => {
      const canvas = p.createCanvas(window.innerWidth, window.innerHeight);
      canvas.parent("#canvas-wrap");
    };

    p.draw = () => {
      if (startCount > 0) {
        startCount--;
      } else {
        if (resetCount <= 0) {
          reset();
        } else {
          let c = p.color(6, 0, 255);
          p.fill(c);
          p.noStroke();
          while (drawCount > 0 && resetCount > 0) {
            const xy = getXY();
            if (xy) {
              p.square(xy[0], xy[1], baseNum);
            }
            resetCount--;
            drawCount--;
          }
          if (resetCount > 0) {
            resetDrawCount();
          }
        }
      }
    };

    function containsSubarray(arr: number[][], subarr: number[]): boolean {
      return arr.some(
        (element) => element[0] === subarr[0] && element[1] === subarr[1]
      );
    }

    function getXY(): number[] | false {
      let returnArr: number[] = [];
      function getReturnArrInternal() {
        returnArr = [
          getDivNum(p.random(p.width), baseNum),
          getDivNum(p.random(p.height), baseNum),
        ];
      }
      getReturnArrInternal();
      while (containsSubarray(xyArr, returnArr)) {
        getReturnArrInternal();
        searchCount--;
        if (searchCount == 0) {
          reset();
          return false;
        }
      }
      resetSearchCount();
      xyArr.push(returnArr);
      return returnArr;
    }

    function getDivNum(val: number, num: number): number {
      return Math.floor(val / num) * num;
    }

    function resetSearchCount() {
      searchCount = 400;
    }
    function resetDrawCount() {
      if (resetCount > 300) {
        drawCount = Math.floor(150 / baseNum);
      } else if (resetCount > 50) {
        drawCount = Math.floor(100 / baseNum);
      } else {
        drawCount = 1;
      }
    }
    function reset() {
      p.background("#0600ff");
      baseNum = Math.max(Math.floor(p.random(100)), 10);
      resetCount = Math.ceil(p.width / baseNum) * Math.ceil(p.height / baseNum);
      resetDrawCount();
      resetSearchCount();
      xyArr = [];
      p.clear();
      startCount = 60;
    }
  };

  document.addEventListener("DOMContentLoaded", () => {
    const targetNode = document.body;
    const config = { childList: true, subtree: true };

    const callback = function (
      mutationsList: MutationRecord[],
      observer: MutationObserver
    ) {
      const canvasWrap = document.getElementById("canvas-wrap");
      if (canvasWrap) {
        new p5(sketch);
        observer.disconnect();
      }
    };

    const observer = new MutationObserver(callback);

    const canvasWrapInitial = document.getElementById("canvas-wrap");
    if (canvasWrapInitial) {
      new p5(sketch);
    } else {
      observer.observe(targetNode, config);
    }
  });
</script>
